version: "3.5"
services:
  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    networks:
      - temporal-network
    expose:
      - 9200
    volumes:
      - /var/lib/elasticsearch/data
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - temporal-network
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - /var/lib/postgresql/data
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - frontend.enableUpdateWorkflowExecution=true
      - frontend.enableUpdateWorkflowExecutionAsyncAccepted=true
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./config/dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - 8080:8080

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.79.0
    networks:
      - temporal-network
    command: [ "--config=/etc/otel-collector-config.yml" ]
    ports:
      - 4317:4317
      - 4318:4318
    volumes:
      - ./docker/otel/otel-collector-config.yml:/etc/otel-collector-config.yml

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin-slim
    networks:
      - temporal-network
    ports:
      - 9411:9411

  app:
    build:
      dockerfile: docker/app/Dockerfile
      context: ./
    # volumes:
    #  - ./app:/var/app
    depends_on:
      - temporal
    networks:
      - temporal-network
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      - TELEMETRY_DRIVER=otel
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
      - OTEL_PHP_TRACES_PROCESSOR=simple
      - TEMPORAL_HOST=temporal
      - OTEL_HOST=collector
      - INTERCEPTORS_RR_PATH=/usr/local/bin/rr
    command: [ "/usr/local/bin/wait-for-temporal.sh", "temporal", "/usr/local/bin/rr", "serve", "-c", "/var/app/.rr.yaml" ]

networks:
  temporal-network:
    driver: bridge
    name: temporal-network
